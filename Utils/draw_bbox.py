import colorsysimport numpy as npfrom PIL import ImageDraw, ImageFontdef draw_rectangle(label, conf, bbox, image, input_shape, num_classes, class_names):    hsv_tuples = [(x / num_classes, 1., 1.) for x in range(num_classes)]    colors = list(map(lambda x: colorsys.hsv_to_rgb(*x), hsv_tuples))    colors = list(map(lambda x: (int(x[0] * 255), int(x[1] * 255), int(x[2] * 255)), colors))    font = ImageFont.truetype(font='Assets/simhei.ttf', size=np.floor(3e-2 * np.shape(image)[1] + 0.5).astype('int32'))    thickness = max((np.shape(image)[0] + np.shape(image)[1]) // input_shape[0], 1)    #   图像绘制    for i, c in list(enumerate(label)):        predicted_class = class_names[int(c)]        box = bbox[i]        score = conf[i]        xmin, ymin, xmax, ymax = box        xmin = max(0, np.floor(xmin).astype('int32'))  # 防止边框超出边界        ymin = max(0, np.floor(ymin).astype('int32'))        xmax = min(image.size[0], np.floor(xmax).astype('int32'))        ymax = min(image.size[1], np.floor(ymax).astype('int32'))        label = '{} {:.2f}'.format(predicted_class, score)        draw = ImageDraw.Draw(image)        label_size = draw.textsize(label, font)        label = label.encode('utf-8')        print(label, xmin, ymin, xmax, ymax)        if xmin - label_size[1] >= 0:            text_origin = np.array([xmin, ymin - label_size[1]])        else:            text_origin = np.array([xmin, ymin + 1])        for i in range(thickness):            draw.rectangle([xmin + i, ymin + i, xmax - i, ymax - i], outline=colors[c])        draw.rectangle([tuple(text_origin), tuple(text_origin + label_size)], fill=colors[c])        draw.text(text_origin, str(label, 'UTF-8'), fill=(0, 0, 0), font=font)        del draw    return image